C++ supports two notions of immutability:

const: meaning roughly " I promise not to change this value."...The compiler enforces the promise made by const....
constexpr: meaning roughly "to be evaluated at compile time." This is used primarily to specify constants...

The major difference between const and constexpr, though, is that constexpr must be evaluated at compile time.

The compiler will catch a constexpr variable that cannot be evaluated at compile time.

A common usage of const is to guard against accidentally changing a variable, especially when it is passed-by-reference as a function argument.

The distinction between const and constexpr is subtle.

In general, though, const is much more common than constexpr.

When in doubt, use const, especially to guard against accidentally modifying a variable.