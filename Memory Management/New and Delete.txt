Comparing malloc with new
The functions malloc and free are library function and represent the default way of allocating and deallocating memory in C. In C++, they are also part of the standard and can be used to allocate blocks of memory on the heap.

With the introduction of classes and object oriented programming in C++ however, memory allocation and deallocation has become more complex: When an object is created, its constructor needs to be called to allow for member initialization. Also, on object deletion, the destructor is called to free resources and to allow for programmer-defined clean-up tasks. For this reason, C++ introduces the operators new / delete, which represent the object-oriented counterpart to memory management with malloc / free

Before we go into further details of new/delete, let us briefly summarize the major differences between malloc/free and new/delete:

Constructors / Destructors Unlike malloc( sizeof(MyClass) ), the call new MyClass() calls the constructor. Similarly, delete calls the destructor.

Type safety malloc returns a void pointer, which needs to be cast into the appropriate data type it points to. This is not type safe, as you can freely vary the pointer type without any warnings or errors from the compiler as in the following small example: MyObject *p = (MyObject*)malloc(sizeof(int));

In C++, the call MyObject *p = new MyObject() returns the correct type automatically - it is thus type-safe.

Operator Overloading As malloc and free are functions defined in a library, their behavior can not be changed easily. The new and delete operators however can be overloaded by a class in order to include optional proprietary behavior. We will look at an example of overloading new further down in this section.
Creating and Deleting Objects
As with malloc and free, a call to new always has to be followed by a call to delete to ensure that memory is properly deallocated. If the programmer forgets to call delete on the object (which happens quite often, even with experienced programmers), the object resides in memory until the program terminates at some point in the future causing a memory leak.

Let us revisit a part of the code example to the right:


myClass = new MyClass();
myClass->setNumber(42); // works as expected
delete myClass;
The call to new has the following consequences:

Memory is allocated to hold a new object of type MyClass
A new object of type MyClass is constructed within the allocated memory by calling the constructor of MyClass
The call to delete causes the following:

The object of type MyClass is destroyed by calling its destructor
The memory which the object was placed in is deallocated


Optimizing Performance with placement new
In some cases, it makes sense to separate memory allocation from object construction. Consider a case where we need to reconstruct an object several times. If we were to use the standard new/delete construct, memory would be allocated and freed unnecessarily as only the content of the memory block changes but not its size. By separating allocation from construction, we can get a significant performance increase.

C++ allows us to do this by using a construct called placement new: With placement new, we can pass a preallocated memory and construct an object at that memory location. Consider the following code:


void *memory = malloc(sizeof(MyClass));
MyClass *object = new (memory) MyClass;
The syntax new (memory) is denoted as placement new. The difference to the "conventional" new we have been using so far is that that no memory is allocated. The call constructs an object and places it in the assigned memory location. There is however, no delete equivalent to placement new, so we have to call the destructor explicitly in this case instead of using delete as we would have done with a regular call to new:


object->~MyClass();
free(memory); 
Important: Note that this should never be done outside of placement new.

In the next section, we will look at how to overload the new operator and show the performance difference between placement new and new
Overloading new[] and delete[]¶
In addition to the new and delete operators we have seen so far, we can use the following code to create an array of objects:


void* operator new[](size_t size);
void operator delete[](void*);
Let us consider the example on the right, which has been slightly modified to allocate an array of objects instead of a single one.

In main, we are now creating an array of three objects of MyClass. Also, the overloaded new and delete operators have been changed to accept arrays. Let us take a look at the console output:


new: Allocating 20 bytes of memory
Constructor is called
Constructor is called
Constructor is called
Destructor is called
Destructor is called
Destructor is called
delete: Memory is freed again 
Interestingly, the memory requirement is larger than expected: With new, the block size was 4 bytes, which is exactly the space required for a single integer. Thus, with three integers, it should now be 12 bytes instead of 20 bytes. The reason for this is the memory allocation overhead that the compiler needs to keep track of the allocated blocks of memory - which in itself consumes memory. If we change the above call to e.g. new MyClass[100](), we will see that the overhead of 8 bytes does not change:


new: Allocating 408 bytes of memory
Constructor is called
…
Destructor is called
delete: Memory is freed again

Reasons for overloading new and delete
Now that we have seen how to overload the new and delete operators, let us summarize the major scenarios where it makes sense to do this:

The overloaded new operator function allows to add additional parameters. Therefore, a class can have multiple overloaded new operator functions. This gives the programmer more flexibility in customizing the memory allocation for objects.

Overloaded the new and delete operators provides an easy way to integrate a mechanism similar to garbage collection capabilities (such as in Java), as we will shorty see later in this course.

By adding exception handling capabilities into new and delete, the code can be made more robust.

It is very easy to add customized behavior, such as overwriting deallocated memory with zeros in order to increase the security of critical application data.

